properties([
	disableConcurrentBuilds(),
	disableResume(),
	durabilityHint('PERFORMANCE_OPTIMIZED'),
	pipelineTriggers([
		cron('@hourly'),
	]),
])

node {
	stage('Checkout') {
		checkout(scmGit(
			userRemoteConfigs: [[
				url: 'git@github.com:docker-library/meta.git',
				credentialsId: 'docker-library-bot',
				name: 'origin',
			]],
			branches: [[name: '*/subset']], // TODO back to main
			extensions: [
				submodule(
					recursiveSubmodules: true,
					parentCredentials: true,
				),
				cleanBeforeCheckout(),
				cleanAfterCheckout(),
				[$class: 'RelativeTargetDirectory', relativeTargetDir: 'meta'],
			],
		))
		sh '''
			git -C meta config user.name 'Docker Library Bot'
			git -C meta config user.email 'doi+docker-library-bot@docker.com'
		'''
	}

	env.BASHBREW_LIBRARY = workspace + '/meta/.doi/library'

	dir('meta') {
		// we *should* update .scripts (since that's where Jenkinsfile.* comes from, so it doesn't really make sense to update our Jenkinsfile and not have it use updated scripts), but it probably should update explicitly to the commit that the Jenkinsfile itself is coming from, if that's possible? ("latest" is probably fine)
		stage('Update DOI') {
			sh '''
				git submodule update --remote --merge .doi
				git submodule update --remote --merge .scripts
			'''
		}

		withCredentials([
			// thanks to rate limits, we either have to "docker login" or look things up via our proxy
			string(credentialsId: 'dockerhub-public-proxy', variable: 'DOCKERHUB_PUBLIC_PROXY'),
			string(credentialsId: 'dockerhub-public-proxy-host', variable: 'DOCKERHUB_PUBLIC_PROXY_HOST'),
		]) {
			stage('Fetch') {
				sh 'bashbrew --library .doi/library fetch $(cat subset.txt)' // TODO --all
			}
			stage('Sources') {
				sh '''
					# we only need to regenerate "sources.json" if ".doi", ".scripts", or "subset.txt" have changed since we last generated it

					needsBuild=
					if [ ! -s commits.json ] || [ ! -s sources.json ]; then
						needsBuild=1
					fi

					doi="$(git -C .doi log -1 --format='format:%H')"
					scripts="$(git -C .scripts log -1 --format='format:%H')"
					subset="$(sha256sum subset.txt | cut -d' ' -f1)"
					export doi scripts subset
					jq -n '{ doi: env.doi, scripts: env.scripts, subset: env.subset }' | tee commits.json
					if [ -z "$needsBuild" ] && ! git diff --exit-code commits.json; then
						needsBuild=1
					fi

					if [ -n "$needsBuild" ]; then
						images="$(cat subset.txt)"
						[ -n "$images" ]
						.scripts/sources.sh $images > sources.json
					fi
				'''
			}
			stage('Builds') {
				sh '.scripts/builds.sh sources.json > builds.json'
			}
		}
		stage('Commit') {
			sh '''
				git add -A .
				if ! git diff --staged --exit-code; then # commit fails if there's nothing to commit
					git commit -m 'Update and regenerate'
				fi
			'''
		}
		sshagent(['docker-library-bot']) {
			stage('Push') {
				sh 'git push origin HEAD:subset' // TODO back to main
			}
		}
	}
}
